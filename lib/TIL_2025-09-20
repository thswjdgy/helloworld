## 변수 선언
// 타입 추론 사용
var author = '개발하는남자'; // Dart가 자동으로 String으로 추론

// 명시적 타입 선언
String author = '개발하는남자';

##Null Safety
// null이 될 수 없는 변수
String name = '개발하는남자'; // 반드시 값이 있어야 함

// null이 될 수 있는 변수
String? bookName; // 초기값 없이 선언 가능, 나중에 null 또는 값 할당 가능

## 숫자 타입
void main() {
  // 정수형
  int age = 37;

  // 실수형
  double height = 175.5;

  // 형변환
  int a = height.toInt();      // 실수를 정수로 변환
  double b = age.toDouble();   // 정수를 실수로 변환

  print('나이: $age, 키: $height');
  print('형변환 결과 - a: $a, b: $b');
}

## 문자열 타입
void main() {
  // 기본 문자열 선언
  var greeting = 'Hello';
  var name = "world";

  // 여러 줄 문자열 (triple quotes 사용)
  var multiLine = '''
여러 줄
문자열입니다.
Dart는 이렇게도 문자열을 처리할 수 있어요!
''';

  print('$greeting, $name!');
  print(multiLine);
}

## 컬렉션 타입
void main() {
  // 가변 리스트 선언
  var numbers = [1, 2, 3];
  numbers.add(4);

  print(numbers); // 출력: [1, 2, 3, 4]
}

// 정적 리스트
  var fixedList = List<int>.filled(3, 0);

## Set(중복 불가)
var fruits = <String>{'사과', '바나나', '사과'}; 
print(fruits); // {사과, 바나나}

## Map(키-값)
var person = {
'name': '개발하는남자',
'age': 37,
};


## 연산자
// 산술 연산자
print(5 + 3);  // 8
print(10 - 4);  // 6
print(3 * 4);  // 12
print(15 / 3);  // 5
print(17 % 5);  // 2

// 비교 연산자
print(5 > 3);   // true
print(5 <= 3);  // false
print(5 == 5);   // true

// 조건 연산자

// null 병합 연산자
String? name = null;
print(name ?? 'Unknown'); // Unknown
// 삼항 연산자
int age = 20;
String status = age >= 18 ? '성인' : '미성년자';

## 제어문

// 조건문
if (age >= 18) {
print('성인');
} else {
print('미성년자');
}

// switch문 (Dart 3.x)
var result = switch (color) {
Color.red => '빨강',
Color.blue => '파랑',
_ => '기타'
};

// 반복문
for (int i = 0; i < 5; i++) print(i);  // 일반 for문
for (var item in list) print(item);  // for-in 문
while (condition) { /* 코드 실행 */ }   // while 문

## 함수

// 기본 함수
int add(int a, int b) {
return a + b;
}
void greet(String name) {
prinmt('Hello, $name!');
}

//매개변수

// 포지셔닝 매개변수
String fullName(String first, String last) {
return '$first $last';
}
// 네이밍 매개변수
String createUser({required String name, int? age}) {
return 'User: $name, Age: ${age ?? 'Unknown'}';
}

## 객체지향 프로그래밍

// 클래스 정의
class Person {
final String name;
final int age;
Person({required this.name, required this.age});
void introduce() {
print('안녕하세요, 저는 $name이고 $age살입니다.');
}
}

// 상속
class Student extends Person {
  final String school;

  Student({
    required super.name,
    required super.age,
    required this.school,
  });
 @override
  void introduce() {
    super.introduce(); // 부모 클래스의 introduce 호출
    print('$school에 다닙니다.');
  }
}












